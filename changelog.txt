vWATCH64 - A variable watch system for QB64 programs
Fellippe Heitor, 2015 - fellippeheitor@gmail.com - @fellippeheitor

Use this program when you need runtime verification of variable values in a program. The output will show you in real time variable changes inside your RUNNING program.

To achieve this result, vWATCH64 will parse your .BAS and extract variable names. With the data gathered, a .BI and a .BM will be generated. A new .BAS file will be output with the appropriate INCLUDEd lines. If QB64.EXE is found, the output file is then compiled. If compilation is sucessful, the variable monitor is started and connects to your program output, displaying variable values in real time.

 - Beta 1: Initial release (December 13th, 2015)

 - Beta 2: December 14th, 2015
     - Added code to look for and parse user defined types. Variables SHARED as a user defined type can be monitored, unless they are arrays.
     - Fixed FILE being set as FREEFILE, which could conflict with programs using OPEN "file" AS #1, instead of a variable and FREEFILE.
     - Added a STRIPCOMMENTS function, that, you guessed it, strips away comments from a source line. I added this after trying some other people's codes (especially Terry Ritchie's games) and finding many comments being misinterpreted as data types.

 - Beta 3: December 18th, 2015
     - Checks to see if client is still sending data, if not, disconnects (triggers a timeout error).
     - Changed variable naming scheme, which allows for vWATCH64 to watch itself.
     - Fixed scroll bar for when there are too many variables on screen.
     - Uses a true type font under Windows (Courier New Monospaced).
     - Considers that not everyone may have used the IDE and thus not every keyword will be in CAPITALS.
     - Parses COMMAND$ to show only the file name in _TITLE; also, to be able to use the original path given to place .BI, .BM and the new .BAS.
     - Output is now quieter while processing, unless -v is used in command line.
     - Connects to an already running client, if compatible - useful for when vWATCH64 is closed by accident before the client.
     - Checks if destination file already exists before processing.
     - Checks if source = destination, to avoid overwriting original source file.
     - Looks for type suffixes (sigils - $, %, &, !, etc) and parse them. (`n and $n are supported, but validity of values won't be checked).
     - Can now watch local variables from MODULE level, acessing them through the SHARED keyword from inside sub vwatch64_VARIABLEWATCH in the .BM
     - Looks for variables with no explicit data type (assumes SINGLE or as otherwise set by DEF)
     - Parses lines with more than one variable defined (using commas)

 - Beta 4: December 20th, 2015
     - Deletes vwatch64.dat upon exit (before it was only deleted after client was intentionally closed it or after the connection timed out.
     - Allows user to filter the list of variables by name, type or value. Just start typing to start filtering. TAB to change fields.
     - Allows the user to drag the scrollbar (mousewheel is reportedly broken under Linux)
     - Adjusted scroll increment for long lists.
     - Fixed: connects to an already running client, if compatible - useful for when vWATCH64 is closed by accident before the client.
     - Shows the .EXE file name being monitored on the title bar. (Windows only)
     - Added automatic compilation under MAC OS X (tested) and under Linux (expected to work with no changes).
     - Fixed: module-level variables defined as a User Defined Type generated an error. Now they can be watched as well.
     - Added support for multiline statements (ending with an underscore).

 - Beta 5: December 23rd, 2015
     - Code is now a bit easier to read. Sections have been moved to SUBs, making it easier to follow.
     - Scroll bar behavior has been completely recoded and now works as expected (scrollbars only show when the list is too long to fit the program area)
     - Static arrays can now be monitored. vWATCH64 will look for unidimensional arrays and add them to the watch list.
     - Lower boundary of arrays is determined based on OPTION BASE, if found in the source file being processed.
     - Command line switches now include -dontcompile and -noarrays

 - Beta 6: December 25th, 2015
     - Now uses Steve's File Selection Utility v1.2 - grab it here: http://www.qb64.net/forum/index.php?topic=11253.0
     - Also uses Terry Ritchie's QB64 Menu and GLInput libraries - grab them here: https://dl.dropbox.com/u/416997/AllRitchiesQB64Libraries.zip
     - Doesn't require command line to set flags anymore. User can answer Y/N questions before processing of files.

 - Beta 7: January 13th, 2016
     - Fixes an issue that caused arrays DIM'd with a sigil not to be properly identified.

 - Beta 8: January 17th, 2016
     - Minor change to fix "can't compile" errors, when compilation was actually successful.

 - Beta 9: (January 19th, 2016)
     - Adds INTERACTIVE MODE (also -interactive command line switch), which allows the user to choose which variables to export (useful in case TOO MANY are found).
     - Fixes the window title not being set until process/monitoring started.
     - Adds -target switch to command line, to indicate the name of the new file
     - (Windows only) Adds -font16 switch to command line, to avoid loading a true type font (defaults to _FONT 16)
     - Simplifies command line swiches: -v, -d, -n, -i, -t, -f16 can be used instead of -verbose, -dontcompile, -noarrays, -interactive, -target and -font16.
     - Rewritten scrolling routine so that it no longer requires an extra 32-bit image to layer the list on top of the main window. ***blazing fast scrolling achieved***
     - For better readability, Lucida Console replaces Courier New, if it's available.

 - Beta 10: (when?)
     - Dragging the scrollbar thumb now updates the screen more often.
     - Can now filter by SCOPE (LOCAL/SHARED)
